
import java.io.*;

class Main {

    private static MakeOrder makeOrder = new MakeOrder();


    public static void main(String args[]) throws IOException {
        System.out.println("Insert your fucking name");
        makeOrder.welcomeMessage();
        makeOrder.orderBurger();
        makeOrder.orderDrink();
        System.out.println("Thank you, see ya!");
        }
    }//class

//*********************************************************************************************************/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class MakeOrder {

    private static Burgers Burger = new Burgers();
    private static Drinks drink = new Drinks();

    void welcomeMessage() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String nameInserted = br.readLine();
        System.out.println("Hi " + nameInserted + ", and welcome to FJavaBurger!");
    }
    
    //choose a burger from the menu

   void orderBurger() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("\nFrom which menu would you like to order? Press 1 for meat burgers or 2 for veggy burgers");

        String order = br.readLine();
        switch (order) {
            case "1":
                System.out.println("Choose from our fucking meat burgers menu");
                for (int i = 0; i < Burger.meatBurgersNames.length; i++) {
                    String burger = Burger.meatBurgersNames[i] + "\n " + Burger.meatBurgersIngredients[i];
                    System.out.println(burger);
                }

                order = br.readLine().toLowerCase();
                String burgerChosen = Burger.choseMeatBurger(order);
                System.out.println(burgerChosen);
                break;

            case "2":
                System.out.println("Princess, choose from our fucking veggy burgers menu");
                for (int i = 0; i < Burger.veggyBurgersNames.length; i++) {
                    String burger = Burger.veggyBurgersNames[i] + "\n " + Burger.veggyBurgersIngredients[i];
                    System.out.println(burger);
                }

                order = br.readLine().toLowerCase();
                burgerChosen = Burger.choseVeggyBurger(order);
                System.out.println(burgerChosen);
                break;

            default:
                System.out.println("You fucker you typed incorrectly! Try again!");
        }

        finishBurgerOrder();
    }


   private void finishBurgerOrder() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Would you like another fucking burger?");
        String order = br.readLine().toLowerCase();
        switch (order) {
            case "yes":
                orderBurger();
                break;

            case "no":
                String orderSummaryVeg = Burger.orderSummaryVeg();
                String orderSummaryNormal = Burger.orderSummaryNormal();
                String summary = "Your order is:" + "\n" + orderSummaryVeg + "\n" + orderSummaryNormal;
                System.out.println(summary);
                int total = Burger.totalVegAmount + Burger.totalNormalAmount;
                System.out.println("The total amount of your order is: " + total + "$");
                break;

            default: System.out.println("If you don't speak english go to Australia and jump with the fucking kangaroos!");
                finishBurgerOrder();
                break;
        }
    }

    void orderDrink() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] newDrink = drink.drinks;
        System.out.println("Would you like a fucking drink?");
        String order = br.readLine().toLowerCase();
        switch (order){
            case "yes":
                System.out.println("Select a drink");
                for(String drink: newDrink ){
                    System.out.println(drink);
                }
                order = br.readLine().toLowerCase();
                String drinkChosen = drink.choseDrink(order);
                System.out.println(drinkChosen);
                finishDrinkOrder();
                break;

            case "no":
                finishOrder();
                break;

            default:
                System.out.println("Can you tell me when are you gonna talk in fucking english?! I can't understand you!");

        }
        drink.drinkOrderSummary();
        //finishDrinkOrder();
    }

    private void finishDrinkOrder() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Do you wanna another fucking drink?");
        String order = br.readLine().toLowerCase();
        switch (order) {
            case "yes":
                orderDrink();
                break;

            case "no":
                int total = Burger.totalVegAmount + Burger.totalNormalAmount + drink.totalDrinkAmount;
                System.out.println("The total amount of your order is: " + total + "$");
                finishOrder();
                break;

            default: System.out.println("If you don't speak english go to Australia and jump with the fucking kangaroos!");
                finishDrinkOrder();
                break;
        }
    }

   private void finishOrder() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Would you like something else? Actually we have nothing more at the moment");
        String order = br.readLine().toLowerCase();
        switch (order) {
            case "yes":
                orderBurger();
                break;

            case "no":
                int total = Burger.totalVegAmount + Burger.totalNormalAmount + drink.totalDrinkAmount;
                System.out.println("The total amount of your order is: " + total + "$");
                break;

            default: System.out.println("If you don't speak english go to Australia and jump with the fucking kangaroos!");
                finishBurgerOrder();
                break;
        }
    }

}//class

//*******************************************************************************************************************/


class Burgers {

    String meatBurgersNames[] = {" 1 SIMPLE BURGER", " 2 MEDIUM BURGER", " 3 WORKER BURGER"};
    private String ingredients[] = {" hamburger", " cheese", " salad", " egg", " bacon", " tomato"};
    String meatBurgersIngredients[] = {makeSimpleBurger(), makeMediumBurger(), makeWorkerBurger()};

    String veggyBurgersNames[] = {" 1 SIMPLE VEG BURGER", " 2 MEDIUM VEG BURGER", " 3 WORKER VEG BURGER"};
    private String vegingredients[] = {" cheese", " salad", " egg", " tomato", " aubergine", " zucchini"};
    String veggyBurgersIngredients[] = {makeSimpleVegBurger(), makeMediumVegBurger(), makeWorkerVegBurger()};

    private int simpleBurgerQuantity;
    private int mediumBurgerQuantity;
    private int workerBurgerQuantity;
    private int simpleBurgerTotal;
    private int mediumBurgerTotal;
    private int workerBurgerTotal;
    int totalNormalAmount;

    private int simpleVegBurgerQuantity;
    private int mediumVegBurgerQuantity;
    private int workerVegBurgerQuantity;
    private int simpleVegBurgerTotal;
    private int mediumVegBurgerTotal;
    private int workerVegBurgerTotal;
    int totalVegAmount;


    private String makeSimpleBurger (){
        return ingredients[0] + ingredients[1];
    }

    private String makeMediumBurger() {
        return ingredients[0] + ingredients[1] + ingredients[2];
    }

    private String makeWorkerBurger() {
        return ingredients[0] + ingredients[1] + ingredients[2] + ingredients[3] + ingredients[5];
    }

    private String makeSimpleVegBurger (){
        return vegingredients[0] + vegingredients[1];
    }

    private String makeMediumVegBurger() {
        return vegingredients[0] + vegingredients[1] + vegingredients[2];
    }

    private String makeWorkerVegBurger() {
        return vegingredients[0] + vegingredients[1] + vegingredients[2] + vegingredients[3] + vegingredients[5];
    }


    /**
     *
     * @param burger the burger that is chosen by the customer
     * @return the order summary
     */

    String choseMeatBurger(String burger) {
        int price;
        String burgerIngredientsInfo;
        switch (burger){
            case "1":
                price = 5;
                simpleBurgerQuantity += 1;
                simpleBurgerTotal = simpleBurgerQuantity*price;
                burgerIngredientsInfo = "\nThe price is: " + price + "$";
                return burgerIngredientsInfo;

            case "2":
                //burgerIngredientsInfo = "This burger is made with: " + makeMediumBurger();
                price = 8;
                mediumBurgerQuantity += 1;
                mediumBurgerTotal = mediumBurgerQuantity*price;
                burgerIngredientsInfo = "\nThe price is: " + price + "$";
                return burgerIngredientsInfo;

            case "3":
                //burgerIngredientsInfo = "This burger is made with: " + makeWorkerBurger();
                price = 10;
                workerBurgerQuantity += 1;
                workerBurgerTotal = workerBurgerQuantity*price;
                burgerIngredientsInfo = "\nThe price is: " + price + "$";
                return burgerIngredientsInfo;

            default:
                return "Wrong order: choose a burger from the menu";
        }
    }


    String orderSummaryNormal (){
        String summary = "MEAT BURGERS";
        if (simpleBurgerQuantity > 0){
            summary += "\n" + simpleBurgerQuantity + " simple burgers";
        }
        if (mediumBurgerQuantity > 0) {
            summary += "\n" + mediumBurgerQuantity + " medium burgers";
        }
        if (workerBurgerQuantity > 0) {
            summary += "\n" + workerBurgerQuantity + " worker burgers";
        }
        if (simpleBurgerQuantity == 0 && mediumBurgerQuantity == 0 && workerBurgerQuantity == 0){
            summary += "\nNo meat burgers";
        }
        totalNormalAmount = simpleBurgerTotal+mediumBurgerTotal+workerBurgerTotal;
        return summary;
    }

    /**
     *
     * @param burger the burger that is chosen by the customer
     * @return the burger info
     */

    String choseVeggyBurger(String burger) {
        int price;
        String burgerIngredientsInfo;
        switch (burger){
            case "1":
                //burgerIngredientsInfo = "This burger is made with: " + makeSimpleVegBurger();
                price = 3;
                burgerIngredientsInfo = "\nThe price is: " + price + "$";
                simpleVegBurgerQuantity += 1;
                simpleVegBurgerTotal = simpleVegBurgerQuantity*price;
                return burgerIngredientsInfo;


            case "2":
                //burgerIngredientsInfo = "This burger is made with: " + makeMediumVegBurger();
                price = 6;
                burgerIngredientsInfo = "\nThe price is: " + price + "$";
                mediumVegBurgerQuantity += 1;
                mediumVegBurgerTotal = mediumVegBurgerQuantity*price;
                return burgerIngredientsInfo;


            case "3":
                //burgerIngredientsInfo = "This burger is made with: " + makeWorkerVegBurger();
                price = 8;
                burgerIngredientsInfo = "\nThe price is: " + price + "$";
                workerVegBurgerQuantity += 1;
                workerVegBurgerTotal = workerVegBurgerQuantity*price;
                return burgerIngredientsInfo;

            default:
                return "Wrong order: choose a burger from the menu";
        }
    }

    String orderSummaryVeg (){
        String summary = "VEGGY BURGERS";
        if (simpleVegBurgerQuantity  > 0) {
            summary += "\n" + simpleVegBurgerQuantity + " simple veg burgers";
        }
        if (mediumVegBurgerQuantity > 0) {
            summary += "\n" + mediumVegBurgerQuantity + " medium veg burgers";
        }
        if (workerVegBurgerQuantity > 0) {
            summary += "\n" + workerVegBurgerQuantity + " worker veg burgers";
        }
        if (simpleVegBurgerQuantity == 0 && mediumVegBurgerQuantity == 0 && workerVegBurgerQuantity == 0){
            summary += "\nNo veg burgers";
        }
        totalVegAmount = simpleVegBurgerTotal + mediumVegBurgerTotal + workerVegBurgerTotal;
        return summary;

    }



}//class


//***************************************************************************************************************/

class Drinks {

    String drinks[] = {"1 NATURAL WATER", "2 SPARKLING WATER", "3 COKE", "4 DIET COKE", "5 LEMON PEPSI", "6 ICED LEMON TEA", "7 ORANGE JUICE"};

    private int naturalWaterQuantity;
    private int sparklingWaterQuantity;
    private int cokeQuantity;
    private int dietCokeQuantity;
    private int lemonPepsiQuantity;
    private int icedLemonTeaQuantity;
    private int orangeJuiceQuantity;
    private int naturalWaterTotal;
    private int sparklingWaterTotal;
    private int cokeTotal;
    private int dietCokeTotal;
    private int lemonPepsiTotal;
    private int icedLemonTeaTotal;
    private int orangeJuiceTotal;
    int totalDrinkAmount;

    /**
     *
     * @param drink chosen by the customer
     * @return drink chosen and info
     */
    String choseDrink(String drink) {
        int price;
        String drinkInfo;
        switch (drink){
            case "1":
                price = 3;
                naturalWaterQuantity += 1;
                naturalWaterTotal = naturalWaterQuantity*price;
                drinkInfo = "\nThe price is: " + price + "$";
                return drinkInfo;

            case "2":
                price = 8;
                sparklingWaterQuantity += 1;
                sparklingWaterTotal = sparklingWaterQuantity*price;
                drinkInfo = "\nThe price is: " + price + "$";
                return drinkInfo;

            case "3":
                //burgerIngredientsInfo = "This burger is made with: " + makeWorkerBurger();
                price = 10;
                cokeQuantity += 1;
                cokeTotal = cokeQuantity*price;
                drinkInfo = "\nThe price is: " + price + "$";
                return drinkInfo;
            case "4":
                price = 3;
                dietCokeQuantity += 1;
                dietCokeTotal = dietCokeQuantity*price;
                drinkInfo = "\nThe price is: " + price + "$";
                return drinkInfo;

            case "5":
                price = 8;
                lemonPepsiQuantity += 1;
                lemonPepsiTotal = lemonPepsiQuantity*price;
                drinkInfo = "\nThe price is: " + price + "$";
                return drinkInfo;

            case "6":
                //burgerIngredientsInfo = "This burger is made with: " + makeWorkerBurger();
                price = 10;
                icedLemonTeaQuantity += 1;
                icedLemonTeaTotal = icedLemonTeaQuantity*price;
                drinkInfo = "\nThe price is: " + price + "$";
                return drinkInfo;

            case "7":
                //burgerIngredientsInfo = "This burger is made with: " + makeWorkerBurger();
                price = 10;
                orangeJuiceQuantity += 1;
                orangeJuiceTotal = orangeJuiceQuantity*price;
                drinkInfo = "\nThe price is: " + price + "$";
                return drinkInfo;

            default:
                return "Wrong order: choose a burger from the menu";
        }
    }

    String drinkOrderSummary () {
        String summary = "DRINKS";
        totalDrinkAmount = naturalWaterTotal + sparklingWaterTotal + cokeTotal + dietCokeTotal + lemonPepsiTotal + icedLemonTeaTotal + orangeJuiceTotal;
        return summary;
    }

    }//class
